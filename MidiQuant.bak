#include <Adafruit_MCP4725.h> // Required for MCP4725 library
#include <SPI.h>              // Required for I2C comms
#include <Wire.h>             // Required for I2C comms
#include <SendOnlySoftwareSerial.h>
#define TOP_SWITCH_PIN 10
#define BOTTOM_SWITCH_PIN 11
#define TOP_LED_PIN 13
#define MIDDLE_LED_PIN 9
#define BOTTOM_LED_PIN 12

#define MIDI_NOTE_ON    0x90
#define MIDI_NOTE_OFF   0x80
#define MIDI_POLYPHONIC 0xA0
#define MIDI_CC B0

#define DEBUG_SERIAL 1  // debug sent out on pin 4 9600 baud serial. Set to 0 to turn off
#define DEBUG_SERIAL_PIN 4

#define GENERATE_RANDOM_INPUT_FOR_TESTING 1

Adafruit_MCP4725 dac; // creates an instance of the DAC
SendOnlySoftwareSerial DebugOutSerial(DEBUG_SERIAL_PIN); // for debug purposes

int noteBuffer = 0;
int tempNoteBuffer = 0;
int a1Raw = 0;
int analogNote = 0;
int lastAnalogNote = 0;
int topSwitchStatus = 0;
int bottomSwitchStatus = 0;
int lastTopSwitchStatus = 0;

unsigned long lastMidiNoteOn = 0;
unsigned long waitPeriod = 2000;
unsigned long blinkLength = 150;
unsigned long tempPause = 100;
unsigned long lastAnalog = 0;
unsigned long lastMidi = 0;

float topVolt = 5.0;
float dacInterval = (((5.0 / topVolt) * 4095) / 60.0);

uint32_t dac_notes[61]; // holds the calculated values for the DAC

byte data;

bool blinkBottom = false;

// This would be the table of note values if you have a perfect 5.0v source. The 
// math function at the beginning of the setup section creates this table based on the 
// actual voltage that the DAC is seeing (you need to measure it in your rack
// with a load present to get the best reading.

// if you use a voltage reference like LM4040D5, then you can omit the math and use the table.
/*const PROGMEM uint16_t dac_notes[61] =
  {// C    C#     D    D#     E     F    F#     G    G#     A    A#     B
    0,   68,  137,  205,  273,  341,  410,  478,  546,  614,  683,  751,
  819,  887,  956, 1024, 1092, 1161, 1229, 1297, 1365, 1434, 1502, 1570,
  1638, 1707, 1775, 1843, 1911, 1980, 2048, 2116, 2185, 2253, 2321, 2389,
  2458, 2526, 2594, 2662, 2731, 2799, 2867, 2935, 3004, 3072, 3140, 3209,
  3277, 3345, 3413, 3482, 3550, 3618, 3686, 3755, 3823, 3891, 3959, 4028,
  4095};*/




void setup() {
  // create DAC table
  for (int x = 0; x < 62; x++) {dac_notes[x] = round(x * dacInterval);}
  Serial.begin(31250);      //Midi In/Out 1
  if (DEBUG_SERIAL) DebugOutSerial.begin(9600);
  if (DEBUG_SERIAL) DebugOutSerial.println("DEBUG OUT");
  pinMode(TOP_LED_PIN, OUTPUT);
  pinMode(BOTTOM_LED_PIN, OUTPUT);
  pinMode(MIDDLE_LED_PIN, OUTPUT);
  pinMode(TOP_SWITCH_PIN, INPUT_PULLUP);
  pinMode(BOTTOM_SWITCH_PIN, INPUT_PULLUP);
  dac.begin(0x60);
  delayMicroseconds(25);
  dac.setVoltage( 0 , false);
  for (int j = 0; j < 5; j++){
    digitalWrite(TOP_LED_PIN, HIGH);
    delay(100);
    digitalWrite(TOP_LED_PIN, LOW);
    delay(100);
  }
  DebugOutSerial.println("DEBUG OUT2");
}

void loop() {
  readSwitches();
  readAnalogInput();
  checkMidiIn();
  if ((millis() - lastMidiNoteOn) > waitPeriod) digitalWrite(TOP_LED_PIN, LOW);
}
void readAnalogInput() {
  if (!GENERATE_RANDOM_INPUT_FOR_TESTING) a1Raw = analogRead(A1);
  else a1Raw = random(512); // generate a random voltage for testing
  
  if (!GENERATE_RANDOM_INPUT_FOR_TESTING || ((millis() - lastAnalog) > tempPause)) {

    analogNote = map(a1Raw, 0, 1024, 0, 61);
    if (analogNote != lastAnalogNote) {
      lastAnalogNote = analogNote;
      int a = analogNote % 12;
      if bitRead(noteBuffer, a) {
        dac.setVoltage( dac_notes[analogNote], false);
        DebugOutSerial.print("NOTE: ");
        DebugOutSerial.println(analogNote);
      }
      else {
        bool keepGoing = true;
        while (keepGoing) {
          if (analogNote != 0 ) {
            analogNote = analogNote - 1;
            a = analogNote % 12;
            if bitRead(noteBuffer, a) {
              dac.setVoltage( dac_notes[analogNote], false);
              DebugOutSerial.print("NOTE: ");
              DebugOutSerial.println(analogNote);
              keepGoing = false;
            }
          } else keepGoing = false;
        }
      }

      lastAnalog = millis();
    }


  }
}

void checkMidiIn() {
  while (Serial.available() > 0) {
    data = Serial.read();
    if (data == MIDI_NOTE_ON) {
      if ((millis() - lastMidiNoteOn) > waitPeriod) tempNoteBuffer = 0;
      if (DEBUG_SERIAL) DebugOutSerial.print(data, HEX);
      if (DEBUG_SERIAL) DebugOutSerial.print(" ");
      data = Serial.read();//Note
      if (DEBUG_SERIAL) DebugOutSerial.println(data, HEX);

      int p = data % 12;
      bitSet(tempNoteBuffer, p);
      if (topSwitchStatus == 1) noteBuffer = tempNoteBuffer;
      if (DEBUG_SERIAL) DebugOutSerial.print(tempNoteBuffer);
      if (DEBUG_SERIAL) DebugOutSerial.print("   ");
      if (DEBUG_SERIAL) DebugOutSerial.println(noteBuffer);
      lastMidiNoteOn = millis();
      digitalWrite(TOP_LED_PIN, HIGH);
      if (DEBUG_SERIAL) printNotes(tempNoteBuffer);
      if (DEBUG_SERIAL) printNotes(noteBuffer);
      data = Serial.read(); //velocity

    }
  }
}
void readSwitches() {
  topSwitchStatus = digitalRead(TOP_SWITCH_PIN);
  if (lastTopSwitchStatus != topSwitchStatus) {
    lastTopSwitchStatus  = topSwitchStatus;
    if (topSwitchStatus == 1) noteBuffer = tempNoteBuffer;
    printNotes(noteBuffer);
  }
  bottomSwitchStatus = digitalRead(BOTTOM_SWITCH_PIN);
}
void printNotes(int a) {

  if (bitRead(a, 0))  DebugOutSerial.print("C " );
  if (bitRead(a, 1))  DebugOutSerial.print("C# ");
  if (bitRead(a, 2))  DebugOutSerial.print("D " );
  if (bitRead(a, 3))  DebugOutSerial.print("D# ");
  if (bitRead(a, 4))  DebugOutSerial.print("E " );
  if (bitRead(a, 5))  DebugOutSerial.print("F " );
  if (bitRead(a, 6))  DebugOutSerial.print("F# ");
  if (bitRead(a, 7))  DebugOutSerial.print("G " );
  if (bitRead(a, 8))  DebugOutSerial.print("G# ");
  if (bitRead(a, 9))  DebugOutSerial.print("A " );
  if (bitRead(a, 10)) DebugOutSerial.print("A# ");
  if (bitRead(a, 11)) DebugOutSerial.print("B " );
  DebugOutSerial.println();

}


/*void checkMidiIn(){
  while (Serial.available() > 0) {
    data = Serial.read();
    if (data == 0x90){

      DebugOutSerial.print(data,HEX);
      DebugOutSerial.print(" ");
      data = Serial.read();
      DebugOutSerial.print(data,HEX);
      DebugOutSerial.print(" ");
      data = Serial.read();
      DebugOutSerial.println(data,HEX);

    }
    digitalWrite(13,HIGH);
  }
  digitalWrite(13,LOW);
  }*/
